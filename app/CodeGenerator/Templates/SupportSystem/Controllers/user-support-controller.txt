<?php

namespace App\Http\Controllers\User\Support;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Services\Support\UserSupport\UserSupportTableDataService;
use App\Services\Support\UserSupport\StoreTicketService;
use App\Services\Support\UserSupport\RespondToSupportService;
use App\Services\Support\UserSupport\FormConfigs\NewTicketFormConfigService;
use App\Services\Support\UserSupport\FormConfigs\NewResponseFormService;
use App\Services\Support\UserSupport\MarkAsReadService;
use App\Queries\Support\UserSupport\ShowTicketToUserQuery;
use App\Queries\Support\UserSupport\ShowResponseToUserQuery;
use App\Services\Support\FormConfigs\SupportTicketByStatusService;
use App\Rules\TicketResponseBelongsToUser;

class UserSupportController extends Controller
{

    public function getUserTickets(Request $request, UserSupportTableDataService $service)
    {

        $request->validate([

            'status' => 'required|integer',

        ]);

        return $service->getTickets($request);      

    }

    public function getSupportFiltersFormConfig()
    {

        // get form configs for filter
        // this is same as the one for admin support
        // use statement is Support not UserSupport

        return SupportTicketByStatusService::getFormConfigs();

    }
  

    public function newTicketFormConfig()
    {

        return NewTicketFormConfigService::getFormConfigs();
        
    }

    public function newResponseFormConfig()
    {

        return NewResponseFormService::getFormConfigs();

    }

    public function store(Request $request)
    {

        $request->validate([

            'support_topic_id' => 'integer|required',
            'ticket_text' => 'string|required|max:1000'

        ]);

        return StoreTicketService::storeTicket($request);

    }

    public function show($id)
    {

       return ShowTicketToUserQuery::getData($id);

    }

    public function respondToSupport(Request $request)
    {

        return RespondToSupportService::storeResponse($request);

    }

    public function showResponse(Request $request)
    {

        $user_id = auth()->id();

        $request->validate([

            'ticket_response_id' => ['integer', 'required', new TicketResponseBelongsToUser($user_id)]

        ]);

        return ShowResponseToUserQuery::getData($request);

    }

    public function markAsRead(Request $request)
    {

        $user_id = auth()->id();

        $request->validate([

            'ticket_response_id' => ['integer', 'required', new TicketResponseBelongsToUser($user_id)]

        ]);

        return MarkAsReadService::markRead($request);

    }

}