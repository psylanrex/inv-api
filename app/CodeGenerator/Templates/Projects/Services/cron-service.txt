<?php

namespace App\Services\Crons;

use Carbon\Carbon;
use App\Models\CronLog;
use App\Models\Interval;
use App\Models\Status;
use App\Models\NotificationStatus;
use App\Services\Crons\Notifications\CronFailNotificationService;


class CronService
{

    public static function runAndLogCron($command_signature, $command_description, $handler_class_name, $handler_method_name, $interval)
    {  

        /*
        |--------------------------------------------------------------------------
        | Initial Values
        |--------------------------------------------------------------------------
        |
        | Set some initial values to start
        | We have 5 values coming in
        | $command_signature is the name of the command, not the class name, see the command file for reference.
        | $handler_class_name is the name of the handler class we will need
        | $handler_method_name is the method we will call on the handler to process the cron
        | 
        */

        $start_time = Carbon::now();

        $cron_fail_details = NULL;

        $success = NULL;

        $interval_id = Interval::getIntervalId($interval);

        /*
        |--------------------------------------------------------------------------
        | Invoke the Handler dynamically
        |--------------------------------------------------------------------------
        |
        | $handler_class_name is passed in through the command_signature, so we know which class we need.
        | We do it dymanically, so all commands can be sent to Cron Service
        | The handler is a separate class that does the actual cron work.
        | 
        */

        $class = '\\App\\Services\\Crons\\Handlers\\' . $handler_class_name;

        $handler = new $class();

        /*
        |--------------------------------------------------------------------------
        | dynamically call the correct handler method
        |--------------------------------------------------------------------------
        |
        | dynamically call the correct handler method
        | returns an array with success set to 1 or 0, and 
        | cron_fail_details set to null if all is good orwe get the actual error message
        | 
        */
            
        $handler_results = $handler->$handler_method_name();

        $cron_failure_details = $handler_results['cron_fail_details'];

        // set end time after handler runs
  
        $end_time = Carbon::now();

        // Calculate the difference with Carbon from start to finish
        
        $time_difference = $start_time->diff($end_time);

        // run time in seconds:

        $run_time = $time_difference->s;

        /*
        |--------------------------------------------------------------------------
        | Set Success Status
        |--------------------------------------------------------------------------
        |
        | Was the cron successful?  if so, $handler_results['success'] will equal 1.
        | then it will find and set the appropriate status id for 'completed' or 'failed'
        | 
        */

        $status_id = Status::setSuccessStatusId($handler_results['success']);
        
        // if successful there is no notification necessary, so we set that as initial value

        $notification_status_id = NotificationStatus::getNotificationStatusId('nothing to send');

        /*
        |--------------------------------------------------------------------------
        | Handle Cron Failure
        |--------------------------------------------------------------------------
        |
        | if the cron fails, set appropriate values and send notfications
        | with failure, we have to determine whether or not to send a notification
        | if success == 0, the cron has failed
        | 
        */

        if ( $handler_results['success'] == 0 ) {

            // with a failed cron, we need some additional values

            // Extract the day part from $start_time

            $start_day = $start_time->format('Y-m-d');

            // get failed status

            $failed_status_id = Status::getStatusId('failed');

            // get notification status values, these return a notification_status_id

            $previously_sent = NotificationStatus::getNotificationStatusId('previously sent');

            $sent = NotificationStatus::getNotificationStatusId('sent');

            // if cron fails, check to see if notification has been sent previously
            // if previously sent, set the notification status id for previously sent

            if ( CronLog::whereDate('created_at', $start_day)->where('status_id', $failed_status_id)->where('notification_status_id', $sent)->exists() ) {

                $notification_status_id = $previously_sent;

            } else {

                // send cron fail notification

                CronFailNotificationService::sendNotifications($command_signature, $cron_failure_details);

                $notification_status_id = $sent;


            }

        }

        /*
        |--------------------------------------------------------------------------
        | Save the Cron Log record
        |--------------------------------------------------------------------------
        |
        | All values are formatted ready to be saved.
        | 
        */

        $cronLog = CronLog::create([

            'cron_name' => $command_signature,
            'status_id' => $status_id,
            'cron_description' => $command_description,
            'cron_fail_details' => $cron_failure_details,
            'interval_id' => $interval_id,
            'run_time' => $run_time,
            'start_time' => $start_time,
            'end_time' => $end_time,
            'notification_status_id' => $notification_status_id

        ]);

        

    }

}