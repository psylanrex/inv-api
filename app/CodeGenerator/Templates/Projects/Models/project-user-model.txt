<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use App\Models\UserRole;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'is_admin',
        'status_id',
        'email_verified_at'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    public static function isAdmin()
    {

        return auth()->user()->is_admin == 1;

    }

    public static function findUserIdByEmail($email)
    {

        if ( self::where('email', $email)->doesntExist() ) {

            return 0;

        }

        $user = self::where('email', $email)->first();

        // return the user_id

        return $user->id;

    }

    public function hasRole($role)
    {
        
        $user_id = auth()->id();

        if ( Role::where('role_name', $role)->doesntExist() ) {

            return FALSE;

        }

        $role = Role::where('role_name', $role)->first();

        return UserRole::where('user_id', $user_id)->where('role_id', $role->id)->exists();

    }
}

