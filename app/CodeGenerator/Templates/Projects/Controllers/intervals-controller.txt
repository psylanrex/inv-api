<?php

namespace App\Http\Controllers\Admin\Intervals;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use App\Models\Interval;
use App\Utilities\DropDownListMaker;
use App\Utilities\SortBy;
use App\Services\Forms\AddFormConfigService;
use App\Services\Forms\EditFormConfigService;

class IntervalsController extends Controller
{

    public $indexColumnMap = ['id', 'interval_name'];

    public function index(Request $request)
    {
        
        $column_map = $this->indexColumnMap;

        list($sortBy, $sortOrder) = SortBy::setSortBy($request, $column_map);
        
        $intervals = Interval::select($column_map)     
                            ->orderBy($sortBy, $sortOrder)                                                  
                            ->paginate(10);

        return $intervals;

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {

           $request->validate([
   
               'interval_name' => 'string|max:140|required|unique:intervals,interval_name',
                               
           ]);
       
           return Interval::create($request->all());

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        
        return Interval::select('id', 'interval_name', 'created_at', 'updated_at')->where('id', $id)->first();
      
    }

    public function addFormConfig(AddFormConfigService $service, DropDownListMaker $listMaker)
    {

       return $service->getFormConfig('Interval', 'intervals', $listMaker);


    }

    public function editFormConfig($id, EditFormConfigService $service, DropDownListMaker $listMaker)
    { 

        return $service->getFormConfig($id, 'Interval', 'intervals', $listMaker); 

    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {

        $request->validate([

            'interval_name' => [
                'required',
                'string',
                'max:140',

                Rule::unique('intervals')->ignore($id),
            ]

        ]);

        $interval = Interval::find($id);

        $interval->update($request->all());

        return $interval;

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        
        return Interval::destroy($id);

    }

    /**
     * Find the specified resource.
     *
     * @param  string  $name
     * @return \Illuminate\Http\Response
     */
    public function search(Request $request, $keyword)
    {
        $column_map = $this->indexColumnMap;

        list($sortBy, $sortOrder) = SortBy::setSortBy($request, $column_map);
        
        $intervals = Interval::select($column_map)
                            ->where('interval_name', 'like', '%'.$keyword.'%')
                            ->orderBy($sortBy, $sortOrder)
                            ->paginate(10);

        return $intervals;

    }

}
