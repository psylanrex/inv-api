<?php

namespace App\Http\Controllers\Admin\CronLogs;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\CronLog;
use App\Utilities\SortBy;

class CronLogsController extends Controller
{

    public $index_column_map = [
        
        'cron_logs.id', 
        'cron_logs.cron_name',
        'statuses.status_name',
        'cron_logs.cron_description',
        'intervals.interval_name',
        'cron_logs.run_time',
        'cron_logs.start_time',
        'cron_logs.end_time',
        'notification_statuses.notification_status_name'
                              
    ];

    public function index(Request $request)
    {
        
        $column_map = $this->index_column_map;

        list($sortBy, $sortOrder) = SortBy::setSortBy($request, $column_map);
        
        $cronLogs = CronLog::select($column_map)
                            ->leftJoin('statuses', 'cron_logs.status_id', '=', 'statuses.id')
                            ->leftJoin('intervals', 'cron_logs.interval_id', '=', 'intervals.id')
                            ->leftJoin('notification_statuses', 'cron_logs.notification_status_id', '=', 'notification_statuses.id')        
                            ->orderBy($sortBy, $sortOrder)                                                  
                            ->paginate(10);

        return $cronLogs;

    }

    public function show($id)
    {

        $column_map = [


            'cron_logs.id', 
            'cron_logs.cron_name',
            'statuses.status_name',
            'cron_logs.cron_description',
            'cron_logs.cron_fail_details', 
            'intervals.interval_name',
            'cron_logs.run_time',
            'cron_logs.start_time',
            'cron_logs.end_time',
            'notification_statuses.notification_status_name'

        ];


        $cronLog = CronLog::select($column_map)
                            ->leftJoin('statuses', 'cron_logs.status_id', '=', 'statuses.id')
                            ->leftJoin('intervals', 'cron_logs.interval_id', '=', 'intervals.id')
                            ->leftJoin('notification_statuses', 'cron_logs.notification_status_id', '=', 'notification_statuses.id')                                                       
                            ->first();

        return $cronLog;

    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        
        return CronLog::destroy($id);

    }

    /**
     * Find the specified resource.
     *
     * @param  string  $name
     * @return \Illuminate\Http\Response
     */
    public function search(Request $request, $keyword)
    {
        $column_map = $this->index_column_map;

        list($sortBy, $sortOrder) = SortBy::setSortBy($request, $column_map);
        
        $cronLogs = CronLog::select($column_map)
                            ->leftJoin('statuses', 'cron_logs.status_id', '=', 'statuses.id')
                            ->leftJoin('intervals', 'cron_logs.interval_id', '=', 'intervals.id')
                            ->leftJoin('notification_statuses', 'cron_logs.notification_status_id', '=', 'notification_statuses.id')    
                            ->where('cron_name', 'like', '%'.$keyword.'%')
                            ->orderBy($sortBy, $sortOrder)
                            ->paginate(10);

        return $cronLogs;

    }

}
