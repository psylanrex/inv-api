<?php

namespace App\Http\Controllers\Admin\Faqs;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use App\Models\Faq;
use App\Utilities\DropDownListMaker;
use App\Utilities\SortBy;
use App\Services\Forms\AddFormConfigService;
use App\Services\Forms\EditFormConfigService;

class FaqsController extends Controller
{

    public $index_column_map = ['faqs.id', 'faqs.faq_question', 'faqs.faq_answer', 'support_topics.support_topic_name'];

    public function index(Request $request)
    {
        
        $column_map = $this->index_column_map;

        list($sortBy, $sortOrder) = SortBy::setSortBy($request, $column_map);
        
        $faqs = Faq::select($column_map)
                   ->leftJoin('support_topics', 'faqs.support_topic_id', '=', 'support_topics.id')     
                   ->orderBy($sortBy, $sortOrder)                                                  
                   ->paginate(10);

        return $faqs;

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {

           $request->validate([
   
               'faq_question' => 'string|max:140|required|unique:faqs,faq_question',
               'faq_answer' => 'string|required',
               'support_topic_id' => 'integer|required'
                               
           ]);
       
           return Faq::create($request->all());

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        
        return Faq::select('faqs.id', 'support_topics.support_topic_name', 'faqs.faq_question', 'faqs.faq_answer', 'faqs.created_at', 'faqs.updated_at')
                   ->leftJoin('support_topics', 'faqs.support_topic_id', '=', 'support_topics.id') 
                   ->where('faqs.id', $id)
                   ->first();
      
    }

    public function addFormConfig(AddFormConfigService $service, DropDownListMaker $listMaker)
    {

       return $service->getFormConfig('Faq', 'faqs', $listMaker);


    }

    public function editFormConfig($id, EditFormConfigService $service, DropDownListMaker $listMaker)
    { 

        return $service->getFormConfig($id, 'Faq', 'faqs', $listMaker); 

    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {

        $request->validate([

            'faq_question' => [
                'required',
                'string',
                'max:140',

                Rule::unique('faqs')->ignore($id),
            ],
            'faq_answer' => 'string|required',
            'support_topic_id' => 'integer|required'

        ]);

        $faq = Faq::find($id);

        $faq->update($request->all());

        return $faq;

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        
        return Faq::destroy($id);

    }

    /**
     * Find the specified resource.
     *
     * @param  string  $name
     * @return \Illuminate\Http\Response
     */
    public function search(Request $request, $keyword)
    {
        $column_map = $this->index_column_map;

        list($sortBy, $sortOrder) = SortBy::setSortBy($request, $column_map);
        
        $faqs = Faq::select($column_map)
                    ->leftJoin('support_topics', 'faqs.support_topic_id', '=', 'support_topics.id') 
                    ->where('faqs.faq_question', 'like', '%'.$keyword.'%')
                    ->orderBy($sortBy, $sortOrder)
                    ->paginate(10);

        return $faqs;

    }

}
